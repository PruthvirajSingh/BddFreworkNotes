Cucumber -folder---\src\test\java\cucumberOptions\TestNGRunner.java
contains the files
import io.cucumber.testng.AbstractTestNGCucumberTests;
import io.cucumber.testng.CucumberOptions;
#####################################################################
@CucumberOptions(features = "C:/NewProject/CucumberProject/src/test/resources/Features",glue = "stepDefinations",monochrome = true)
public class TestNGRunner extends AbstractTestNGCucumberTests{

}
and \src\test\java\stepDefinations\MainSteps.java contains the 
package stepDefinations;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class MainSteps {
	@Given("user is on login page")
	public void user_is_on_login_page() {
	    // Write code here that turns the phrase above into concrete actions
	    throw new io.cucumber.java.PendingException();
	}
	@When("user enters valid user1 and pass1")
	public void user_enters_valid_user1_and_pass1() {
	    // Write code here that turns the phrase above into concrete actions
	    throw new io.cucumber.java.PendingException();
	}
	@When("click on the login button")
	public void click_on_the_login_button() {
	    // Write code here that turns the phrase above into concrete actions
	    throw new io.cucumber.java.PendingException();
	}
	@Then("user is navigated to home page")
	public void user_is_navigated_to_home_page() {
	    // Write code here that turns the phrase above into concrete actions
	    throw new io.cucumber.java.PendingException();
	}
}
###################################################################################
Dependacy required for the cucumber is --
<dependencies>
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-java</artifactId>
			<version>7.15.0</version>
		</dependency>
		

	
		<dependency>
			<groupId>io.cucumber</groupId>
			<artifactId>cucumber-testng</artifactId>
			<version>7.15.0</version>
		</dependency>

		<dependency>
			<groupId>info.cukes</groupId>
			<artifactId>cucumber-java</artifactId>
			<version>1.2.2</version>
		</dependency>
	</dependencies>
#####################################################################################
###Feature files contains the multiple scenrios 


###Parameterizations of the scenrios:
for the parameter the scerios in the cucumber:
//scenario outline used for the create the data driven test cases
 Scenario Outline: User login is successfully with valid credentials
    Given user is on login page
    When user login into application with "<Username>" and password "<Password>" combinations
    Then user is navigated to home page

    Examples: 
      | Username | Password    |
      | User123  | Password123 |
      | User456  | Password456 |
########################################################################################  
###Regex pattern 
instend of string hardcore here if you want to provide the int value, any other values that time Regex pattern will use
@When("user login into application with {string} and password {string} combinations")
	public void user_enters_valid_user1_and_pass1(String username, String password) {
		System.out.println(username + "password is " + password);
	}
instend to this we can able to write this like below 
//(.+) --accept the any data types
@When("^user login into application with (.+)  and password (.+)  combinations$")//start with the ^ and end it with the $  for the Regex pattern 
	public void user_enters_valid_user1_and_pass1(String username, String password) {
		System.out.println(username + "password is " + password);
	}
by using this it still accept the any data type
 Scenario Outline: User login is successfully with valid credentials
    Given user is on login page
    When user login into application with Username and password 122233 combinations  //no need to add the "<>" here for this 
    Then user is navigated to home page

    Examples: 
      | Username | Password    |
      | User123  | Password123 |
      | User456  | Password456 |
############################################################################################
#### for the run the test case particularly for the specific data
  Scenario: User login is successfully with valid credentials
  Given User is pratice landing sing in page
  When user sing in into the application
  | pruthviraj |
  | rajput	   |
  |contact@gmail.com|
  |43444444444445|
  
  And click on the login button
  Then user is navigated to home page
  
 Like this   When user sing in into the application
  | pruthviraj |
  | rajput	   |
  |contact@gmail.com|
  |43444444444445| we can able to send the data from the feature files into the test case it is stored the data in the
  formate of the List<String> and by using this list of string we can able to get the one by one data 
  
  @When("user sing in into the application")
  public void user_is_on_pratice_page(List<String> data){
  	system.out.println(data.get(0));
  	
  }
like this we can able to extract the data 
but the by using the Scenario Outline: we can pass the 2 set of the data but by using this we can able to send the 
one set of the data only 


###################################################################################
Tags in the cucumber 
1.@SmokeTest --	by using this we can able to provide the tags
  @SmokeTest
  Scenario: Admin login is successfully with valid credentials
  Given user is on login page
  When user login into application with "admin" and password "1234"
  And click on the login button
  Then user is navigated to home page
 and in the testrunner by using the --@CucumberOptions(features = "C:/NewProject/CucumberProject/src/test/resources/Features",tags = "@SmokeTest",glue = "stepDefinations",monochrome = true)
public class TestNGRunner extends AbstractTestNGCucumberTests{

}

##################################################################################
2.@RegressionTest--By using this keyword we can able to provide the tags as the regression
  @RegressionTest
  Scenario Outline: User login is successfully with valid credentials
    Given user is on login page
    When user login into application with "<Username>" and password "<Password>" combinations
    Then user is navigated to home page

    Examples: 
      | Username | Password    |
      | User123  | Password123 |
      | User456  | Password456 |
####################################################################################
3.Combinations of the both the tags:
  @SmokeTest @RegressionTest--by using this we can able to write the two tags 
  @SmokeTest @RegressionTest
  Scenario Outline: User login is successfully with valid credentials
    Given user is on login page
    When user login into application with "<Username>" and password "<Password>" combinations
    Then user is navigated to home page

    Examples: 
      | Username | Password    |
      | User123  | Password123 |
      | User456  | Password456 |
      
     @CucumberOptions(features = "C:/NewProject/CucumberProject/src/test/resources/Features",tags = "@RegressionTest and @SmokeTest",glue = "stepDefinations",monochrome = true)
public class TestNGRunner extends AbstractTestNGCucumberTests{

}
#################################################################################
If you want to run the test case either @SmokeTest or @RegressionTest
So that time we can able to provide the 
OR==='or'
@CucumberOptions(features = "C:/NewProject/CucumberProject/src/test/resources/Features",tags = "@RegressionTest or @SmokeTest",glue = "stepDefinations",monochrome = true)
public class TestNGRunner extends AbstractTestNGCucumberTests{

}
#################################################################################
Not---If you want to run the test case with the all the test but not the regression
@CucumberOptions(features = "C:/NewProject/CucumberProject/src/test/resources/Features",tags = "not @RegressionTest",monochrome = true)
public class TestNGRunner extends AbstractTestNGCucumberTests{

}
##################################################################################
If there is repetative test case senrios for the automations steps for that time we requried to write that step as like that:
Background:
Given Setup the entries in database
When launch the browser from config variables 
And hit the home page URL of banking site

by using this we can able to avoid the repective test cases 
Background keyword find that is there any keyword present or not then it will go and apply that first 
then start to apply the senrios or senrios outlines
**Scope of the Background is only for the current feature file it would not use for the another feature file 
##################################################################################
Hooks in the cucumber:
	@Before
	public void netBankingApplication() {
		System.out.println("Net banking applications");
	}
	public void mortageApplication() {
		System.out.println("Mortage applications ");
	}
	$$$$$$$$$$by using the hooks like @before ---this method excuted the 
